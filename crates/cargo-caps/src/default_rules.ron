[
    (
        // Stuff that anyone is allowed to use:
        caps: [],
        patterns: [
            // Anonymous functionsâ€¦ I think these are things LLVM generates, and should be fine.
            // Curiously, they only show up in optimized builds.
            "anon.*",

            // NOTE: cargo-caps ignored leading underscores

            // Simple memory stuff:
            ".memset_pattern.*",
            "bzero",
            "memcmp",
            "memcpy",
            "memmove",
            "memset_pattern*",
            "memset",
            "strcmp",
            "strcpy",
            "strlen",

            "std::sys::pal::unix::os::errno",
            "error",

            // Math:
            "acos",
            "acosf",
            "atan2",
            "atan2f",
            "cbrt",
            "cbrtf",
            "cos",
            "cosf",
            "exp",
            "exp10",
            "exp10f",
            "exp2",
            "exp2f",
            "expf",
            "fmod",
            "fmodf",
            "hypot",
            "hypotf",
            "log",
            "log10",
            "log10f",
            "log2",
            "log2f",
            "logf",
            "pow",
            "powf",
            "powidf2",
            "powisf2",
            "sin",
            "sincos_stret",
            "sincosf_stret",
            "sinf",
            "tan",
            "tanf",

            // TODO: extend with https://gcc.gnu.org/onlinedocs/gccint/Soft-float-library-routines.html
            // int <-> float conversions:
            "fixdfti",
            "fixsfti",
            "fixunsdfti",
            "fixunssfti",

            "pthread_cond_*",
            "pthread_mutex_*",
            "close", // Closing a FILE is fine

            // Thread Local Variable
            "tlv_bootstrap",

            "divt*",
            "muloti*", // Multiply?
            "sdiv*", // unsigned div
            "smod*", // unsigned modulus
            "udiv*", // unsigned div
            "umod*", // unsigned modulus

            "Unwind_Resume", // Rust exception handling
            "rust_eh_personality", // Rust exception handling
            "rust_no_alloc_shim_is_unstable*",
        ],
    ),
    (
        caps: [ Sysinfo ],
        patterns: [
            "isatty"
        ],
    ),
    (
        caps: [ Time ],
        patterns: [
            "gettimeofday"
        ],
    ),
    (
        caps: [ ],
        patterns: [
            // core has no capabilities
            "core::*",
        ],
    ),
    (
        caps: [
            Alloc,
        ],
        patterns: [
            "rdl_alloc_zeroed",
            "rdl_alloc",
            "rdl_dealloc",
            "rdl_realloc",
            "rg_oom",
            "rust_alloc_error_handler",
            "rust_alloc_zeroed",
            "rust_alloc",
            "rust_dealloc",
            "rust_realloc",
        ],
    ),
    (
        caps: [
            Panic,
        ],
        patterns: [
            "rust_begin_unwind",
            "rust_drop_panic",
            "rust_foreign_exception",
            "rust_panic_cleanup",
            "rust_panic",
            "rust_start_panic",
            "core::panicking::*",
        ],
    ),
    (
        caps: [
            Alloc,
        ],
        patterns: [
            "alloc::*",
        ],
    ),
    // NOTE: Everything in std is generally allowed to allocate and panic
    (
        caps: [
            Alloc, Panic,
        ],
        patterns: [
            "std::backtrace::*",
            "std::collections::*",
            "std::ffi::os_str::*",
            "std::hash::*",
            "std::os::unix::ffi::os_str::*",
            "std::panic::*",
            "std::panicking::*",
            "std::path::Components",
            "std::path::Path::components",
            "std::path::Path::extension::*",
            "std::path::Path::is_absolute",
            "std::path::PathBuf", // NOT ::*, but just `<std::path::PathBuf as core::clone::Clone>::clone` is OK
            "std::process::abort*", // TODO: consider adding special capability for abort/exit
            "std::process::exit*", // TODO: consider adding special capability for abort/exit
            "std::sync::*",
            "std::sys::os_str::*",
            "std::sys::pal::unix::abort_internal*",
            "std::sys::pal::unix::decode_error_kind",
            "std::sys::pal::unix::decode_error_kind",
            "std::sys::pal::unix::sync::*",
            "std::sys::process::unix::common::cstring_array::*",
            "std::sys::random::*", // TODO: consider adding special capability for random
            "std::sys::sync::*",
            "std::sys::thread_local::*",
            "std::thread::current::current",
            "std::thread::local::*",
            "std::thread::Thread::id",
            "std::thread::ThreadId*",

            // I doubt these allocate, but ðŸ¤·
            "std::char::*",
            "std::f32::*",
            "std::f64::*",
            "std::i128::*",
            "std::i16::*",
            "std::i32::*",
            "std::i64::*",
            "std::i8::*",
            "std::u128::*",
            "std::u16::*",
            "std::u32::*",
            "std::u64::*",
            "std::u8::*",
        ],
    ),
    (
        caps: [
            Alloc, Panic,
            Sysinfo,
        ],
        patterns: [
            "std::env::*",
            "std::sys::backtrace::*",
            "std::sys::io::is_terminal::*",
        ],
    ),
    (
        caps: [
            Alloc, Panic,
            Thread,
        ],
        patterns: [
            "std::sys::pal::unix::thread::Thread*",
            "std::thread::*",
        ],
    ),
    (
        caps: [
            Alloc, Panic,
            Stdio,
        ],
        patterns: [
            "std::io::*",
            "std::os::fd::owned::AsFd",
            "std::os::fd::owned::BorrowedFd::borrow_raw",
            "std::sys::io::io_slice::*",
            "std::sys::pal::unix::stdio::*",
        ],
    ),
    (
        caps: [
            Alloc, Panic,
            FS,
        ],
        patterns: [
            "fcntl",
            "std::fs::*",
            "std::path::*",
            "std::sys::fs::*",
            "std::sys::pal::unix::fs::*",
        ],
    ),
    (
        caps: [
            Alloc, Panic,
            Net,
        ],
        patterns: [
            "std::net::*",
        ],
    ),
    (
        caps: [
            Alloc, Panic,
            Time,
        ],
        patterns: [
            "std::time::*",
        ],
    ),
    (
        // TODO: categorize the rest of std:: :)
        caps: [
            Any, // conservatively assume the worst
        ],
        patterns: [
            "std::*",
        ],
    ),
]
